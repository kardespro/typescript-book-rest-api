{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import express, { Express, Request, Response } from 'express';\nimport dotenv from 'dotenv';\nimport axios from 'axios'\ndotenv.config();\n\nconst app: Express = express();\n//const port = process.env.PORT;\n\napp.get('/', (req: Request, res: Response) => {\n  res.send('Express + TypeScript Server');\n});\n\n\napp.get('/api/_v1/_ping-callback', (req: Request, res: Response) => {\n  res.send('Express + TypeScript Server');\n});\n\napp.get('/api/_v1/_books/search', async(req: Request, res: Response) => {\nlet q = req.query._q;\n  let f = req.query.filter;\n  let sort = req.query.sort;\n  let proj = req.query.projection;\n  if(!q) return res.json({status:404,message: \"Query Error\"})\n  let d = await axios.get(`https://www.googleapis.com/books/v1/volumes?q=${q}`)\n  let p = d.data\n  if(f){\n    let ft = await axios.get(`https://www.googleapis.com/books/v1/volumes?q=${q}&filter=${f}`)\n    res.json({\n      status:200,\n      sortType: sort || \"Not Found\",\n      filterType: f,\n      projection: proj ||\"Not Found\",\n      message: ft.data\n    })\n  }\n  if(sort){\n    let s = await axios.get(`https://www.googleapis.com/books/v1/volumes?q=${q}&orderBy=${sort}`)\n    res.json({\n      status:200,\n      sortType: sort,\n      filterType: f || \"Not Found\",\n      projection: proj ||\"Not Found\",\n      message: s.data\n    })\n  }\n  if(proj){\n    let prj = await axios.get(`https://www.googleapis.com/books/v1/volumes?q=${q}&projection=${proj}`)\n    res.json({\n      status:200,\n      sortType: sort || \"Not Found\",\n      filterType: f || \"Not Found\",\n      projection: proj,\n      message: prj.data\n    })\n  }\n  res.json({status:200,sortType: \"Not Found\", filterType: \"Not Found\",projection:\"Not Found\",message: p})\n\n});\n\napp.listen(3000, () => {\n  console.log(`\u26A1\uFE0F[server]: Server is running at https://localhost:3000`);\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,qBAAoD;AACpD,oBAAmB;AACnB,mBAAkB;AAClB,sBAAO;AAEP,MAAM,MAAe;AAGrB,IAAI,IAAI,KAAK,CAAC,KAAc,QAAkB;AAC5C,MAAI,KAAK;AAAA;AAIX,IAAI,IAAI,2BAA2B,CAAC,KAAc,QAAkB;AAClE,MAAI,KAAK;AAAA;AAGX,IAAI,IAAI,0BAA0B,OAAM,KAAc,QAAkB;AACxE,MAAI,IAAI,IAAI,MAAM;AAChB,MAAI,IAAI,IAAI,MAAM;AAClB,MAAI,OAAO,IAAI,MAAM;AACrB,MAAI,OAAO,IAAI,MAAM;AACrB,MAAG,CAAC;AAAG,WAAO,IAAI,KAAK,EAAC,QAAO,KAAI,SAAS;AAC5C,MAAI,IAAI,MAAM,qBAAM,IAAI,iDAAiD;AACzE,MAAI,IAAI,EAAE;AACV,MAAG,GAAE;AACH,QAAI,KAAK,MAAM,qBAAM,IAAI,iDAAiD,YAAY;AACtF,QAAI,KAAK;AAAA,MACP,QAAO;AAAA,MACP,UAAU,QAAQ;AAAA,MAClB,YAAY;AAAA,MACZ,YAAY,QAAO;AAAA,MACnB,SAAS,GAAG;AAAA;AAAA;AAGhB,MAAG,MAAK;AACN,QAAI,IAAI,MAAM,qBAAM,IAAI,iDAAiD,aAAa;AACtF,QAAI,KAAK;AAAA,MACP,QAAO;AAAA,MACP,UAAU;AAAA,MACV,YAAY,KAAK;AAAA,MACjB,YAAY,QAAO;AAAA,MACnB,SAAS,EAAE;AAAA;AAAA;AAGf,MAAG,MAAK;AACN,QAAI,MAAM,MAAM,qBAAM,IAAI,iDAAiD,gBAAgB;AAC3F,QAAI,KAAK;AAAA,MACP,QAAO;AAAA,MACP,UAAU,QAAQ;AAAA,MAClB,YAAY,KAAK;AAAA,MACjB,YAAY;AAAA,MACZ,SAAS,IAAI;AAAA;AAAA;AAGjB,MAAI,KAAK,EAAC,QAAO,KAAI,UAAU,aAAa,YAAY,aAAY,YAAW,aAAY,SAAS;AAAA;AAItG,IAAI,OAAO,KAAM,MAAM;AACrB,UAAQ,IAAI;AAAA;",
  "names": []
}
